# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# commands:
#   destroy_infrastructure:
#     steps:
#       - run:
#           name: Destroy Already Deployed Infrastructure
#           command: 
#             aws cloudformation delete-stack --stack-name circleci-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
#   create_infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Create Cloudformation Stack
#           command: |
#             aws cloudformation deploy \
#                 --template-file ansible/ec2.yaml \
#                 --stack-name circleci-${CIRCLE_WORKFLOW_ID:0:5} \
#                 --region us-east-2

  #update_inventory:
  #  docker:
  #    - image: amazon/aws-cli
  #  steps:
  #    - checkout
  #    - run:
  #        name: Update Inventory
  #        command: |
  #          aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> ansible/inventory
  #    - run:
  #        name: Read Inventory
  #        command: |
  #          cat ansible/inventory

  # ansible:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["ff:fd:f3:67:a1:d3:3c:8f:d6:5b:9e:c5:3a:8e:f1:b1"]
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           apk add --update ansible

  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook ansible/main-remote.yml

  # simulate_failed_smoke_test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:
  #         name: simulate Failure
  #         command: return 1
  #     - destroy_infrastructure
  #       when: on_fail


  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: Test application Liveness
  #         command: |
  #               URL="http://3.145.74.250:3000/"
  #               if curl -s --head "https://google.com" 
  #               then
  #                 echo "The application deployment worked!"
  #               else
  #                 echo "The application failed"
  #               fi

  # create_infrastructureb: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #               --template-file ansible/ec2.yaml \
  #               --stack-name circleci-${CIRCLE_WORKFLOW_ID:0:5} \

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Run Playbook and Configure server
          command: |
            ls
      - run:
          name: Create and deploy static website
          command: |
            aws cloudformation deploy \
                --template-file ansible/bucket.yml \
                --stack-name circleci-${CIRCLE_WORKFLOW_ID:0:5} \
                --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

workflows:
  version: 2
  Promote Deployment:
    jobs:
      #- create_infrastructureb
      #- ansible
      #    requires:
       #     - create_infrastructure
      #- simulate_failed_smoke_test:
          #requires:
          #  - create_infrastructureb
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
      








