# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_infrastructure:
    steps:
      - run:
          name: Destroy Already Deployed Infrastructure
          when: on_fail
          command: 
            aws cloudformation delete-stack --stack-name circleci-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
                --template-file ansible/ec2.yaml \
                --stack-name circleci-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-2

  #update_inventory:
  #  docker:
  #    - image: amazon/aws-cli
  #  steps:
  #    - checkout
  #    - run:
  #        name: Update Inventory
  #        command: |
  #          aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> ansible/inventory
  #    - run:
  #        name: Read Inventory
  #        command: |
  #          cat ansible/inventory

  ansible:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ff:fd:f3:67:a1:d3:3c:8f:d6:5b:9e:c5:3a:8e:f1:b1"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible

      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook ansible/main-remote.yml

  simulate_failed_smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: simulate Failure
          command: return 1
      - destroy_infrastructure


  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: Test application Liveness
          command: |
                URL="http://3.145.74.250:3000/"
                if curl -s --head "https://google.com" 
                then
                  echo "The application deployment worked!"
                else
                  echo "The application failed"
                fi

  create_infrastructureb: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
                --template-file ansible/ec2.yaml \
                --stack-name circleci-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-2
      - run:
          name: Allow time to deploy stack resources
          command: |
            sleep 3m

workflows:
  version: 2
  infrastructure workflow:
    jobs:
      - create_infrastructureb
      #- ansible
      #    requires:
       #     - create_infrastructure
      - simulate_failed_smoke_test:
          requires:
            - create_infrastructureb

      








